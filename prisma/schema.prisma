generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CA
  CLIENT
}

enum CAType {
  AUDIT
  TAXATION
  MANAGEMENT
  FORENSIC
  COST
  FINANCIAL
}

enum ClientType {
  INDIVIDUAL
  BUSINESS
  GOVT_DEPT
  NGO
  CHARITY
  EDUCATIONAL_INSTITUTE
  HEALTH_CARE_SECTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EntityType {
  PROPRIETORSHIP
  PARTNERSHIP
  LLP
  PVT_LTD
  PUBLIC_LTD
  HUF
  TRUST
  SOCIETY
  NGO
}

enum DocumentType {
  PAN
  AADHAAR
  GST_CERT
  CIN_DOC
  ITR_ACK
  FINANCIALS
  OTHER
}

enum ComplianceType {
  ITR
  GST
  TDS
  ROC
  ADVANCE_TAX
}

enum ComplianceStatus {
  PENDING
  FILED
  OVERDUE
}

enum AccountType {
  SAVINGS
  CURRENT
  OD
  CC
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  UPI
  CASH
  BANK_TRANSFER
  CARD
  CHEQUE
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  clientDetails   ClientDetails? @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)
  clientDetailsId String?

  @@map("users")
}

model ClientDetails {
  id             String     @id @default(cuid())
  type           ClientType
  panNumber      String     @unique
  aadhaarNumber  String?    @unique
  passportNumber String?    @unique
  gstin          String?    @unique
  cin            String?    @unique
  tanNumber      String?    @unique
  msmeNumber     String?    @unique
  iecCode        String?    @unique

  contactEmail     String
  contactPhone     String
  presentAddress   String
  permanentAddress String?
  officeAddress    String?

  // Relations
  individual        IndividualClient?
  organization      OrganizationClient?
  bankAccounts      BankAccount[]
  documents         Document[]
  complianceRecords ComplianceRecord[]
  invoices          Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model IndividualClient {
  id            String        @id @default(cuid())
  fullName      String
  gender        Gender?
  dob           DateTime
  clientDetails ClientDetails @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)

  clientDetailsId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationClient {
  id                String        @id @default(cuid())
  businessName      String
  entityType        EntityType
  incorporationDate DateTime
  clientDetails     ClientDetails @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)

  clientDetailsId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id            String        @id @default(cuid())
  clientDetails ClientDetails @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)

  clientDetailsId String
  bankName        String
  accountNumber   String
  ifscCode        String
  accountType     AccountType
  createdAt       DateTime    @default(now())
}

model Document {
  id            String        @id @default(cuid())
  clientDetails ClientDetails @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)

  clientDetailsId String
  type            DocumentType
  url             String
  uploadedAt      DateTime     @default(now())
}

model ComplianceRecord {
  id            String        @id @default(cuid())
  clientDetails ClientDetails @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)

  clientDetailsId String
  type            ComplianceType
  dueDate         DateTime
  filedOn         DateTime?
  status          ComplianceStatus
  remarks         String?
  createdAt       DateTime         @default(now())
}

model Invoice {
  id              String         @id @default(cuid())
  clientDetails   ClientDetails  @relation(fields: [clientDetailsId], references: [id], onDelete: Cascade)
  clientDetailsId String
  invoiceNumber   String         @unique
  issueDate       DateTime       @default(now())
  dueDate         DateTime
  items           InvoiceItem[]
  totalAmount     Decimal        @db.Decimal(10, 2)
  taxAmount       Decimal        @db.Decimal(10, 2)
  grandTotal      Decimal        @db.Decimal(10, 2)
  status          InvoiceStatus
  paymentMethod   PaymentMethod?
  paymentDate     DateTime?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model InvoiceItem {
  id      String  @id @default(cuid())
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  invoiceId   String
  description String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)
}
