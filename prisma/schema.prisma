generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CA
  CLIENT
}

enum CAType {
  AUDIT
  TAXATION
  MANAGEMENT
  FORENSIC
  COST
  FINANCIAL
}

enum ClientType {
  INDIVIDUAL
  BUSINESS
  GOVT_DEPT
  NGO
  CHARITY
  EDUCATIONAL_INSTITUTE
  HEALTH_CARE_SECTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EntityType {
  PROPRIETORSHIP
  PARTNERSHIP
  LLP
  PVT_LTD
  PUBLIC_LTD
  HUF
  TRUST
  SOCIETY
  NGO
}

enum DocumentType {
  PAN
  AADHAAR
  GST_CERT
  CIN_DOC
  ITR_ACK
  FINANCIALS
  OTHER
}

enum ComplianceType {
  ITR
  GST
  TDS
  ROC
  ADVANCE_TAX
}

enum ComplianceStatus {
  PENDING
  FILED
  OVERDUE
}

enum AccountType {
  SAVINGS
  CURRENT
  OD
  CC
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  UPI
  CASH
  BANK_TRANSFER
  CARD
  CHEQUE
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(CA)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  IndividualClientDetails IndividualClientDetails[]

  OrganizationClient OrganizationClient[]

  @@map("users")
}

model IndividualClientDetails {
  id            String   @id @default(cuid())
  fullName      String
  gender        Gender?
  dob           DateTime
  panNumber     String   @unique
  aadhaarNumber String?  @unique

  contactEmail     String
  contactPhone     String
  presentAddress   String
  permanentAddress String?
  officeAddress    String?

  caId String
  ca   User   @relation(fields: [caId], references: [id])

  // Relations
  bankAccounts BankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("individual_client_details")
}

model OrganizationClient {
  id                String        @id @default(cuid())
  businessName      String
  entityType        EntityType
  incorporationDate DateTime
  panNumber         String        @unique
  aadhaarNumber     String?       @unique
  gstNumber         String?       @unique
  caId              String
  ca                User          @relation(fields: [caId], references: [id])
  // Relations
  bankAccounts      BankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organization_clients")
}

model BankAccount {
  id            String      @id @default(cuid())
  bankName      String
  accountNumber String
  ifscCode      String
  accountType   AccountType

  individualClientId   String?
  organizationClientId String?
  individualClient     IndividualClientDetails? @relation(fields: [individualClientId], references: [id], onDelete: Cascade)
  organizationClient   OrganizationClient?      @relation(fields: [organizationClientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("bank_accounts")
}

model Document {
  id   String       @id @default(cuid())
  type DocumentType
  url  String

  clientId String?

  uploadedAt DateTime @default(now())

  @@map("documents")
}

model ComplianceRecord {
  id      String           @id @default(cuid())
  type    ComplianceType
  dueDate DateTime
  filedOn DateTime?
  status  ComplianceStatus
  remarks String?

  createdAt DateTime @default(now())

  @@map("compliance_records")
}

model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  issueDate     DateTime       @default(now())
  dueDate       DateTime
  totalAmount   Decimal        @db.Decimal(10, 2)
  taxAmount     Decimal        @db.Decimal(10, 2)
  grandTotal    Decimal        @db.Decimal(10, 2)
  status        InvoiceStatus
  paymentMethod PaymentMethod?
  paymentDate   DateTime?
  notes         String?

  // Relations
  items InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)

  // Foreign key 
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}
